" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

" Map leader to space -------------------------------------------------------------------------------------------------
let mapleader = "\<Space>"

" Plugins -------------------------------------------------------------------------------------------------------------
Plug 'machakann/vim-highlightedyank'                " Highlight copied text
Plug 'tpope/vim-commentary'                         " Commentary plugin
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'preservim/nerdtree'

" Plugin settings -----------------------------------------------------------------------------------------------------

" Common settings -----------------------------------------------------------------------------------------------------
set scrolloff=5                                     " Show lines of context around the cursor
set incsearch                                       " Incremental searching
set ignorecase                                      " Ignore case when searching
set hlsearch                                        " Highlight matches when searching
set smartcase                                       " No ignore case when pattern is uppercase
set relativenumber                                  " Relative line numbers
set showmodewidget                                  " Show vim mode widget
set colorfulmodewidget                              " Use colorful vim mode widget
set clipboard=unnamedplus,unnamed,ideaput           " Integrate with system clipboard
set idearefactormode=keep

" Custom bindings -----------------------------------------------------------------------------------------------------
nmap <leader><Esc> :nohlsearch<CR>
nnoremap <leader>* 0y$/\V<C-r>"<CR>

" Idea specific settings ----------------------------------------------------------------------------------------------
set ideajoin                                        " Smart join for J

" Mappings ------------------------------------------------------------------------------------------------------------
nmap <leader>rr <Action>(Run)

" Debug
nmap <leader>rd <Action>(Debug)
nmap <leader>da <Action>(ToggleLineBreakpoint)
nmap <leader>dm <Action>(XDebugger.MuteBreakpoints)
nmap <leader>do <Action>(StepOver)
nmap <leader>di <Action>(StepInto)
nmap <leader>dl <Action>(ShowExecutionPoint)
nmap <leader>dr <Action>(Resume)
nmap <leader>dd <Action>(AndroidConnectDebuggerAction)

" Git
nmap <leader>ha <Action>(Vcs.QuickListPopupAction)
vmap <leader>ha <Action>(Vcs.QuickListPopupAction)
nmap <leader>hb <Action>(Git.Branches)
nmap <leader>hd <Action>(Compare.SameVersion)
nmap <leader>hD <Action>(Vcs.ShowTabbedFileHistory)
nmap <leader>hB <Action>(Git.CompareWithBranch)
vmap <leader>hs <Action>(Vcs.ShowHistoryForBlock)
nmap <leader>hx <Action>(Annotate)
nmap <leader>hp <Action>(Vcs.Push)

" Go to file
nmap <leader><leader> <Action>(RecentFiles)
nmap <leader>ss <Action>(SearchEverywhere)
nmap <leader>sc <Action>(GotoClass)
nmap <leader>sf <Action>(GotoFile)
nmap <leader>st <Action>(GotoTest)
nmap <leader>s/ <Action>(FindInPath)

" Go to method
nmap gi <Action>(GotoImplementation)
nmap gs <Action>(GotoSuperMethod)

" Formatting & Refactor
nmap <leader>f <Action>(ReformatCode)
vmap <leader>f <Action>(ReformatCode)
nmap <leader>rel <Action>(IntentionActionAsAction_org.jetbrains.kotlin.idea.codeInsight.intentions.shared.ChopArgumentListIntention)
nmap <leader>reL <Action>(IntentionActionAsAction_org.jetbrains.kotlin.idea.codeInsight.intentions.shared.ChopParameterListIntention)
nmap <leader>ren <Action>(IntentionActionAsAction_org.jetbrains.kotlin.idea.k2.codeinsight.intentions.AddNamesToCallArgumentsIntention)
nmap <leader>rn <Action>(RenameElement)
nmap <leader>rev <Action>(IntroduceVariable)
vmap <leader>rev <Action>(IntroduceVariable)
nmap <leader>rem <Action>(ExtractFunction)
vmap <leader>rem <Action>(ExtractFunction)

" Generate code
nmap <leader>rg <Action>(GenerateGroup)
nmap <leader>ri <Action>(ImplementMethods)
nmap <leader>ro <Action>(OverrideMethods)

" Text movement
imap <C-h> <Left>
imap <C-l> <Right>
imap <C-j> <Down>
imap <C-k> <Up>
vmap J <Action>(MoveLineDown)
vmap K <Action>(MoveLineUp)

" Invert semantics for known keywords
nnoremap ! :call Invert(0)<CR><Esc>
vnoremap ! :<C-u>call Invert(1)<CR><Esc>

" Tabs
nmap <leader>tp <Action>(PinActiveTab)
nmap <leader>to <Action>(ReopenClosedTab)
nmap <tab> gt
nmap <S-tab> gT
nmap ]t <Action>(com.mnw.tabmover.actions.MoveTabDownAction)
nmap [t <Action>(com.mnw.tabmover.actions.MoveTabUpAction)

" Harpoon
" nmap <leader>hh <Action>(ShowHarpoon)
" nmap <leader>ha <Action>(AddToHarpoon)
" nmap <M-h> <Action>(GotoHarpoon1)
" nmap <M-j> <Action>(GotoHarpoon2)
" nmap <M-k> <Action>(GotoHarpoon3)
" nmap <M-l> <Action>(GotoHarpoon4)
" nmap <leader><M-h> <Action>(SetHarpoon1)
" nmap <leader><M-j> <Action>(SetHarpoon2)
" nmap <leader><M-k> <Action>(SetHarpoon3)
" nmap <leader><M-l> <Action>(SetHarpoon4)

" ADB Idea
nmap <leader>a <Action>(AdbIdea)

" Misc
nmap ]d <Action>(GotoNextError)
nmap [d <Action>(GotoPreviousError)
nmap <leader>x <Action>(CloseContent)
nmap <leader>o <Action>(SelectInProjectView)
nmap \ :NERDTreeToggle<CR>

" Diff
nmap ]] <Action>(NextDiff)
nmap [[ <Action>(PreviousDiff)
nmap <C-]> <Action>(Diff.NextChange)
nmap <C-[> <Action>(Diff.PrevChange)
nmap ]c <Action>(VcsShowNextChangeMarker)<Esc>
nmap [c <Action>(VcsShowPrevChangeMarker)<Esc>

" vim-multiple-cursors
nmap <C-n> <Plug>NextOccurrence
xmap <C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <leader><C-n> <Plug>AllOccurrences
xmap <leader><C-n> <Plug>AllOccurrences

" Functions -----------------------------------------------------------------------------------------------------------
function! Invert(calledFromVisual)
  let antonyms = ['true', 'false',
                 \'==', '!=',
                 \'&&', '||',
                 \'VERTICAL', 'HORIZONTAL',
                 \'assertTrue', 'assertFalse',
                 \'VISIBLE', 'GONE',
                 \'visible', 'gone',
                 \'val', 'var']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction
